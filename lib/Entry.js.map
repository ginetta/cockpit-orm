{"version":3,"sources":["../src/Entry.js"],"names":["has","x","Entry","cockpit","schema","fields","Map","defaultSchema","console","error","map","name","forEach","set","field","path","get","fn","options","image"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;AAEA,IAAMA,OAAM,SAANA,IAAM;AAAA,SAAK,CAAC,uBAAQC,CAAR,CAAN;AAAA,CAAZ;;IAEqBC,K;AAKnB,uBAAyC;AAAA;;AAAA,QAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,QAAlBC,MAAkB,QAAlBA,MAAkB;AAAA,QAAVC,MAAU,QAAVA,MAAU;;AAAA;;AAAA,SAJzCC,GAIyC,GAJnC,IAAIA,GAAJ,EAImC;AAAA,SAFzCC,aAEyC,GAFzB,CAAC,KAAD,EAAQ,UAAR,EAAoB,KAApB,EAA2B,MAA3B,EAAmC,WAAnC,EAAgD,QAAhD,CAEyB;;AACvC,SAAKJ,OAAL,GAAeA,OAAf;AACA,SAAKE,MAAL,GAAcA,MAAd;AACA,SAAKD,MAAL,GAAcA,MAAd;;AAEA,QAAI,CAAC,KAAKC,MAAV,EAAkB,OAAOG,QAAQC,KAAR,CAAc,8BAAd,CAAP;AAClB,QAAI,CAAC,KAAKL,MAAV,EAAkB,OAAOI,QAAQC,KAAR,CAAc,8BAAd,CAAP;;AAElB,iCAAIL,OAAOC,MAAX,sBAAsB,KAAKE,aAAL,CAAmBG,GAAnB,CAAuB;AAAA,aAAS,EAAEC,UAAF,EAAT;AAAA,KAAvB,CAAtB,GAAkEC,OAAlE,CACE,iBAAc;AAAA,UAAXD,IAAW,SAAXA,IAAW;;AACZ,YAAKL,GAAL,CAASO,GAAT,CAAaF,IAAb,EAAmB,MAAKN,MAAL,CAAYM,IAAZ,CAAnB;AACD,KAHH;AAKD;;;;wBAEGG,K,EAAOC,I,EAAM;AACf,UAAIA,IAAJ,EAAU;AACR,eAAO,sBAAI,KAAKT,GAAL,CAASU,GAAT,CAAaF,KAAb,CAAJ,EAAyBC,IAAzB,CAAP;AACD;;AAED,aAAO,KAAKT,GAAL,CAASU,GAAT,CAAaF,KAAb,CAAP;AACD;;;wBAEGA,K,EAAOC,I,EAAM;AACf,UAAIA,IAAJ,EAAU;AACR,eAAOf,KAAI,KAAKM,GAAL,CAASU,GAAT,CAAaF,KAAb,CAAJ,EAAyBC,IAAzB,CAAP;AACD;;AAED,aAAOf,KAAI,KAAKM,GAAL,CAASU,GAAT,CAAaF,KAAb,CAAJ,CAAP;AACD;;;wBAEGA,K,EAAO;AACT,aAAO,KAAKR,GAAL,CAASO,GAAT,CAAaC,KAAb,CAAP;AACD;;;4BAEOG,E,EAAI;AACV,aAAO,KAAKX,GAAL,CAASM,OAAT,CAAiBK,EAAjB,CAAP;AACD;;;kCAEaH,K,EAAOI,O,EAAS;AAC5B,aAAO,KAAKf,OAAL,CAAagB,KAAb,CAAmB,KAAKH,GAAL,CAASF,KAAT,EAAgB,MAAhB,CAAnB,EAA4CI,OAA5C,CAAP;AACD;;;2BAEM,CAAE;;;;;;kBAhDUhB,K","file":"Entry.js","sourcesContent":["import get from 'lodash.get';\nimport isEmpty from 'is-empty';\n\nconst has = x => !isEmpty(x);\n\nexport default class Entry {\n  Map = new Map();\n\n  defaultSchema = ['_by', '_created', '_id', '_mby', '_modified', '_order'];\n\n  constructor({ cockpit, schema, fields }) {\n    this.cockpit = cockpit;\n    this.fields = fields;\n    this.schema = schema;\n\n    if (!this.fields) return console.error('Entry fields cannot be empty');\n    if (!this.schema) return console.error('Entry schema cannot be empty');\n\n    [...schema.fields, ...this.defaultSchema.map(name => ({ name }))].forEach(\n      ({ name }) => {\n        this.Map.set(name, this.fields[name]);\n      },\n    );\n  }\n\n  get(field, path) {\n    if (path) {\n      return get(this.Map.get(field), path);\n    }\n\n    return this.Map.get(field);\n  }\n\n  has(field, path) {\n    if (path) {\n      return has(this.Map.get(field), path);\n    }\n\n    return has(this.Map.get(field));\n  }\n\n  set(field) {\n    return this.Map.set(field);\n  }\n\n  forEach(fn) {\n    return this.Map.forEach(fn);\n  }\n\n  getImageField(field, options) {\n    return this.cockpit.image(this.get(field, 'path'), options);\n  }\n\n  save() {}\n}\n"]}